name: Deploy Streamlit App

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Quality Checks"]
    types:
      - completed

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-cloud:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Deploy to Streamlit Cloud
    - name: Deploy to Streamlit Cloud
      env:
        STREAMLIT_API_KEY: ${{ secrets.STREAMLIT_API_KEY }}
      run: |
        # Install Streamlit CLI if needed
        pip install streamlit
        
        # Deploy to Streamlit Cloud
        # Replace with your actual deployment commands
        echo "Deploying to Streamlit Cloud..."
        # streamlit deploy ...

    # Optional: Deploy to other platforms
    - name: Deploy to Alternative Platforms
      run: |
        echo "Add deployment steps for other platforms if needed"
        # Examples:
        # - Heroku
        # - Google Cloud Run
        # - AWS ECS
        # - Azure Container Apps

    - name: Notify Deployment Status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          const message = `
          ðŸš€ Deployment Status: ${context.job.status}
          
          - Workflow: ${context.workflow}
          - Run: ${run_url}
          - Commit: ${context.sha}
          `;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.issue.number,
            body: message
          }); 